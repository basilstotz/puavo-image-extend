#!/bin/sh


#if ! test $(id --user) = 0;then
#    exec sudo $0 $@
#fi

on_exit(){
    #generic-img-mount --umount $SOURCE
    test -f $IMAGE.img && chown --reference ..  $IMAGE.img
}


CURRENT_IMAGE=$(cat /etc/puavo-image/name)
OSNAME=$(echo $CURRENT_IMAGE|cut -d- -f1-2)
CLASS=$(echo $CURRENT_IMAGE|cut -d- -f3)

REPOSITORY=$(puavo-conf puavo.image.servers|xargs|cut -d\  -f1)
GNUPG=""


while [ $# -gt 0 ]; do
    case $1 in
	-h|--help)
	    shift
	    echo "Usage: $(basename $0) source_image"
	    echo "       $(basename $0) [options]"
	    echo
	    echo "Patch a PuavoOS image and compress a new image." 
 	    echo "    -g, --gnupg <directory>"
	    echo "    -r, --repository <hostname> ($REPOSITORY)"
 	    echo "    -o, --osname <osname> ($OSNAME)"
	    echo "    -c, --class <lcass> ($CLASS)"
 	    echo "    -h, --help"
	    echo
	    exit 0
	    ;;

	#config 
	-o|--osname)
	    shift
	    OSNAME=$1
	    shift
	    ;;
	-c|--class)
	    shift
	    CLASS=$1
	    shift
	    ;;
	-r|--repository)
	    shift
	    REPOSITORY=$1
	    shift
	    ;;
	-g|--gnupg)
	    shift
	    GNUPG=$1
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	-*)
	    echo "error: invalid argument '$1'"
	    exit 1
	    ;;
	*)
	    break
	    ;;
    esac
done

#setup config
if test -z "$REPOSITORY"; then
    if test -f config/parts.d/gnugpg/repository; then
	REPOSITORY=$(cat config/parts.d/gnugpg/repository)
    else
	echo "error: repository not set. run: $(basename $0) --repository <repository>. "
	exit 1
    fi
else
    mkdir -p config/parts.d/gnugpg
    echo $REPOSITORY > config/parts.d/gnugpg/repository
fi


if test -z "$GNUPG"; then
    if ! test -d config/parts.d/gnugpg/pkg/; then
	echo "error: public keys not set. run: $(basename $0) --gnupg <dir>. "
	exit 1
    fi
else
    mkdir -p config/parts.d/gnugpg/pkg
    cp $GNUPG/pubring.kbx config/parts.d/gnugpg/pkg/.
    cp $GNUPG/trustdb.gpg config/parts.d/gnugpg/pkg/.
fi

if test -z "$OSNAME"; then
    if test -f config/options.d/osname; then
       OSNAME=$(cat config/options.d/osname)
    fi
else
    mkdir -p config/options.d
    echo $OSNAME > config/options.d/osname
fi

if test -z "$CLASS"; then
    if test -f config/options.d/class; then
       OSNAME=$(cat config/options.d/class)
    fi
else
    mkdir -p config/options.d
    echo $CLASS > config/options.d/class
fi

if test -f packages.puavo; then
    cp packages.puavo config/parts.d/puavoconf/packages.list
else
    echo "info: you have no packages.puavo file, you will not be able to use puavo-pkg"
fi

if test -f packages.debian; then
    mkdir -p config/lists.d
    cp packages.debian config/lists.d/packages.list
else
    echo "info: you have no packages.debian file, you will not install any packages"
fi




echo $OSNAME $CLASS $REPOSITORY 

exit


# some paramter checks
if [ $# -ne 1 ]; then
    echo  "invalid number of arguments ($#), expected 1"
    exit 1
fi



SOURCE=$1
if ! test -f $SOURCE; then
	echo "error: source file not found"
	exit 1
fi	
DIST=$(basename $SOURCE|cut -d- -f4)


##################################################################################
###################################################################################
#                     ready now. mount the source image                           #
###################################################################################
###################################################################################

trap on_exit EXIT
trap on_exit INT



generic-img-mount $SOURCE
if test $? -ne 0;then
    echo "could not mount \"$SOURCE\""
    exit 1
fi
CHROOT=$(basename -s .img $SOURCE)

echo $CHROOT


mkdir -p $CHROOT/install

ls $DATA_DIR

pwd

cp -r $DATA_DIR/* $CHROOT/install/



$(dirname $0)/generic-dir-patch $CHROOT  > ./log/last-build.log
RET="$?"
if test $RET -ne 0;then
    echo "could not patch \"$SOURCE\""
    exit 1
fi


###################################################################################
###################################################################################
#                                we start compressing the image                        #
###################################################################################
###################################################################################
echo
echo "info: compressing image ..."

# clean chroot
test -d $CHROOT/install && rm -r $CHROOT/install
test -d $CHROOT/var/cache/apt/archives/ && rm -r $CHROOT/var/cache/apt/archives/
mkdir $CHROOT/var/cache/apt/archives/


# update some vlaues in /etc/puavo-image
if ! test -f $CHROOT/etc/puavo-image/base_name;then
   cp $CHROOT/etc/puavo-image/name $CHROOT/etc/puavo-image/base_name
fi
if ! test -f $CHROOT/etc/puavo-image/base_release;then
   cp $CHROOT/etc/puavo-image/release $CHROOT/etc/puavo-image/base_release
fi
if ! test -f $CHROOT/etc/puavo-image/base_class;then
   cp $CHROOT/etc/puavo-image/class $CHROOT/etc/puavo-image/base_class
fi
echo "${IMAGE}.img" > $CHROOT/etc/puavo-image/name
echo "$( cat $CHROOT/etc/puavo-image/base_release ) (${VERSION})" > $CHROOT/etc/puavo-image/release
echo "$CLASS" > $CHROOT/etc/puavo-image/class
echo "${IMAGE}.img" > $CHROOT/etc/puavo-image/name
echo "$( cat $CHROOT/etc/puavo-image/release ) (${VERSION})">$CHROOT/etc/puavo-image/release
echo "$CLASS" > $CHROOT/etc/puavo-image/class

#compose new image name
VERSION=$(date +%Y-%m-%d-%H%M%S)
IMAGE="${OSNAME}-${CLASS}-${DIST}-${VERSION}-amd64"


#    make compressed image
mksquashfs  $CHROOT ${IMAGE}.img -noappend -no-recovery

on_exit

exit 0
